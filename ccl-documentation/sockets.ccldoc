
(chapter "Programming with Sockets"
  (defsection "Overview"
    (para "{CCL} supports the socket abstraction for
      interprocess communication. A socket represents a connection to
      another process, typically (but not necessarily) a TCP/IP
      network connection to a client or server running on some other
      machine on the network.")
    (para "IPv6 is supported by the :internet6 address family.
      Applications should use the "
     (ref (definition :function ccl::resolve-address)) "
      function to translate host and port specifications to socket
      addresses.  While host and port numbers can still be dealt with
      separately, it is preferable to use "
     (ref (definition :class ccl::socket-address)) " instances to specify socket
      endpoints for unified parsing of string representations and
      printing.")
    (para "All symbols mentioned in this chapter are exported from
      the CCL package. As of version 0.13, these symbols are
      additionally exported from the OPENMCL-SOCKET package.")
    (para "{CCL} supports three types of sockets: TCP sockets, UDP
      sockets, and Unix-domain sockets.  This should be enough for all
      but the most esoteric network situations.  All sockets are
      created by "
     (ref (definition :function make-socket)) ".  The type of socket
      depends on the arguments to it, as follows:")
    (listing :definition
      (item "tcp-stream" ccldoc::=> "A buffered bi-directional stream over a TCP/IP connection.
	    tcp-stream is a subclass of stream, and you can read and write to it
	    using all the usual stream functions. Created by (make-socket
	    :address-family :internet :type :stream :connect :active ...) or by
	    (accept-connection ...).")
      (item "file-socket-stream" ccldoc::=> #:|A buffered bi-directional stream over a "UNIX domain"
	    connection. file-socket-stream is a subclass of stream, and you can
	    read and write to it using all the usual stream functions. Created
	    by (make-socket :address-family :file :type :stream :connect :active
	    ...) or by (accept-connection ...),|)
      (item "listener-socket" ccldoc::=> "A passive socket used to listen for incoming TCP/IP
	    connections on a particular port. A listener-socket is not a stream.
	    It doesn't support I/O. It can only be used to create new
	    tcp-streams by accept-connection. Created by (make-socket :type
	    :stream :connect :passive ...)")
      (item "file-listener-socket" ccldoc::=> "A passive socket used to listen for incoming UNIX domain
	    connections named by a file in the local filesystem. A
	    listener-socket is not a stream. It doesn't support I/O. It can
	    only be used to create new file-socket-streams by accept-connection.
	    Created by (make-socket :address-family :file :type :stream :connect
	    :passive ...)")
      (item "udp-socket" ccldoc::=> "A socket representing a packet-based UDP/IP connection. A
	    udp-socket supports I/O but it is not a stream. Instead, you must
	    use the special functions send-to and receive-from to read and write
	    to it. Created by (make-socket :type :datagram ...)")))
  (defsection "Sockets Dictionary"
    (definition (:function make-socket)
     "make-socket {code &key} address-family type connect eol format remote-address remote-host remote-port local-address local-host local-port local-filename remote-filename keepalive reuse-address nodelay broadcast linger backlog input-timeout output-timeout connect-timeout auto-close deadline"
     nil
     (defsection "Arguments and Values"
       (listing :definition
         (item "{param address-family}" ccldoc::=> "The address/protocol family of this
		socket. Currently, :internet (the default), meaning
		IPv4, :internet6, meaning IPv6, and :file, referring
		to UNIX domain addresses, are supported.")
         (item "{param type}" ccldoc::=> "One of :stream (the default) to request a
		connection-oriented socket, or :datagram to request a
		connectionless socket. The default is :stream.")
         (item "{param connect}" ccldoc::=> "This argument is only relevant to sockets of type
		:stream. One of :active (the default) to request a :passive
		to request a file or TCP listener socket.")
         (item "{param eol}" ccldoc::=> "This argument is currently ignored (it is accepted for
		compatibility with Franz Allegro).")
         (item "{param format}" ccldoc::=> "One of :text (the default), :binary, or :bivalent.
		This argument is ignored for :stream sockets for now, as
		:stream sockets are currently always bivalent (i.e. they
		support both character and byte I/O). For :datagram sockets,
		this argument is ignored (the format of a datagram socket
		is always :binary).
		")
         (item "{param remote}" ccldoc::=> "For TCP streams, it specifies the socket address
		to connect to, specified as socket-address instance.
		Ignored for listener sockets. For UDP sockets, it can
		be used to specify a default address for subsequent calls
		to send-to or receive-from.")
         (item "{param remote-host}" ccldoc::=> "For TCP streams, it specifies the host to
		connect to (in any format acceptable to resolve-address).
		Ignored for listener sockets. For UDP sockets, it can be
		used to specify a default host for subsequent calls to
		send-to or receive-from.")
         (item "{param remote-port}" ccldoc::=> "For TCP streams, it specifies the port to
		connect to (in any format acceptable to resolve-address).
		Ignored for listener sockets. For UDP sockets, it can be
		used to specify a default port for subsequent calls to for
		subsequent calls to send-to or receive-from.")
         (item "{param remote-filename}" ccldoc::=> "For file-socket streams, it specifies the
		name of a file in the local filesystem (e.g., NOT mounted
		via NFS, AFP, SMB, ...) which names and controls access to a
		UNIX-domain socket.")
         (item "{param local-address}" ccldoc::=> "Allows you to specify a local address for a
		listener or UDP socket, for the case where you want to
		restrict connections to those coming to a specific local
		address for security reasons.")
         (item "{param local-host}" ccldoc::=> "Allows you to specify a local host address for a
		listener or UDP socket, for the case where you want to
		restrict connections to those coming to a specific local
		address for security reasons.")
         (item "{param local-port}" ccldoc::=> "Specify a local port for a socket. Most useful for
		listener sockets, where it is the port on which the socket
		will listen for connections.")
         (item "{param local-filename}" ccldoc::=> "For file-listener-sockets, specifies the name
		of a file in the local filesystem which is used to name a
		UNIX-domain socket. The actual filesystem file should not
		previously exist when the file-listener-socket is created;
		its parent directory should exist and be writable by the
		caller. The file used to name the socket will be deleted
		when the file-listener-socket is closed.")
         (item "{param keepalive}" ccldoc::=> #:|If true, enables the periodic transmission of
		"keepalive" messages.|)
         (item "{param reuse-address}" ccldoc::=> "If true, allows the reuse of local ports in listener
		sockets, overriding some TCP/IP protocol specifications. You
		will need this if you are debugging a server..")
         (item "{param nodelay}" ccldoc::=> "If true, disables Nagle's algorithm, which tries
		to minimize TCP packet fragmentation by introducing
		transmission delays in the absence of replies. Try setting
		this if you are using a protocol which involves sending a
		steady stream of data with no replies and are seeing
		significant degradations in throughput.")
         (item "{param broadcast}" ccldoc::=> "If true, requests permission to broadcast datagrams on
		a UDP socket.")
         (item "{param linger}" ccldoc::=> "If specified and non-nil, should be the number of
		seconds the OS is allowed to wait for data to be pushed
		through when a close is done. Only relevant for TCP sockets.")
         (item "{param backlog}" ccldoc::=> "For a listener socket, specifies the number of
		connections which can be pending but not accepted. The
		default is 5, which is also the maximum on some operating
		systems.")
         (item "{param input-timeout}" ccldoc::=> "The number of seconds before an input operation
		times out.  Must be a real number between zero and one
		million.  If an input operation takes longer than the
		specified number of seconds, an
		{code input-timeout} error is signalled.
		(see {section Stream Timeouts and Deadlines})")
         (item "{param output-timeout}" ccldoc::=> "The number of seconds before an output operation
		times out.  Must be a real number between zero and one
		million.  If an output operation takes longer than the
		specified number of seconds, an
		{code output-timeout} error is signalled.
		(see {section Stream Timeouts and Deadlines})")
         (item "{param connect-timeout}" ccldoc::=> "The number of seconds before a connection
		attempt times out. [TODO: what are acceptable values?]
		If a connection attempt takes longer than the
		specified number of seconds, a
		{code socket-error} is signalled.  This
		can be useful if the specified interval is shorter
		than the interval that the OS's socket layer imposes,
		which is sometimes a minute or two.")
         (item "{param auto-close}" ccldoc::=> "When non-nil, any resulting socket stream will
		be closed when the GC can prove that the stream is
		unreferenced.  This is done via CCL's termination
		mechanism [TODO add xref].")
         (item "{param deadline}" ccldoc::=> "Specifies an absolute time in
		internal-time-units.  If an I/O operation on the
		stream does not complete before the deadline then a
		{code COMMUNICATION-DEADLINE-EXPIRED}
		error is signalled.  A deadline takes precedence over
		any input/output timeouts that may be set.  (see {section Stream Timeouts and Deadlines})")))
     (defsection "Description"
       (para "Creates and returns a new socket.  For :passive
	  sockets, the :local-address, :local-port or :local-filename
	  arguments are required, depending on the type of the socket.
	  For :active sockets, either the :remote-address, the
	  :remote-host and :remote-port, or the :remote-filename
	  arguments must be present, depending on the socket
	  type.")))
    (definition (:function accept-connection) "accept-connection (socket listener-socket) {code &key} wait" nil
     (defsection "Arguments and Values"
       (listing :definition
         (item "{param socket}" ccldoc::=> "The listener-socket to listen on.")
         (item "{param wait}" ccldoc::=> "If true (the default), and there are no connections
		waiting to be accepted, waits until one arrives. If false,
		returns NIL immediately.")))
     (defsection "Description"
       (para "Extracts the first connection on the queue of pending
	  connections, accepts it (i.e. completes the connection startup
	  protocol) and returns a new tcp-stream or file-socket-stream
	  representing the newly established connection. The tcp stream
	  inherits any properties of the listener socket that are relevant
	  (e.g. :keepalive, :nodelay, etc.) The original listener socket
	  continues to be open listening for more connections, so you can
	  call accept-connection on it again.")))
    (definition (:function ccl::resolve-address)
     "resolve-address {code &key} host port socket-type connect address-family numeric-host-p numeric-service-p singlep errorp"
     nil
     (defsection "Arguments and Values"
       (listing :definition
         (item "{param host}" ccldoc::=> #:|Specification of the host, as a string.  This
		can be either a host name such as
		"clozure.com" or any of the literal address
		forms accepted by getaddrinfo().|)
         (item "{param port}" ccldoc::=> #:|Specification of the port.  This
		can be either a service name such as
		"http" or a port number.|)
         (item "{param socket-type}" ccldoc::=> "Service type for port lookups, can be either
		:stream for TCP services or :datagram for UDP.
		Defaults to :stream.")
         (item "{param connect}" ccldoc::=> "Specifies how the returned " (ref (definition :class ccl::socket-address))
          " instances will be used.
		If :active is passed, which is the default, the host
		address will default to the address of the loopback
		interface of the local host if not specified.  When
		:passive is used, the host address will default to the
		wildcard address for the given address family.  This
		parameter has no effect if the :host parameter is
		used.")
         (item "{param address-family}" ccldoc::=> "Specifies the address family that should be
		returned, can be specified as either :internet or
		:internet6.  If it is specified, only addresses of
		that family are returned.")
         (item "{param numeric-host-p}" ccldoc::=> "If this argument is true, no host name lookups
		will be performed for the host address.  A numeric
		address literal must be passed in this case.")
         (item "{param numeric-port-p}" ccldoc::=> "If this argument is true, no service name
		lookups will be performed for the port address.  A
		numeric port number must be passed in this
		case.")
         (item "{param singlep}" ccldoc::=> "If this argument is set to a true value, which
		is the default, only the first matching address is
		returned.  If it is passed as NIL, all matching
		addresses are returned as a list.")
         (item "{param errorp}" ccldoc::=> "If this argument is set to a true value, which
		is the default, an error is signalled if the given
		host and/or port combination did not yield any
		matches.  If it is passed as NIL, the function returns
		NIL if no addresses matched the supplied
		arguments.")))
     (defsection "Description"
       (para "Converts a host and/or port specification to one or
	  more "
        (ref (definition :class ccl::socket-address)) " instances.  This
	  function uses the getaddrinfo() system function underneath
	  which knows how to translate all standard address and port
	  formats and appropriately orders adresses for hosts with
	  multiple addresses.  It returns the best matching
	  translation or, if the :singlep argument is passed as false,
	  or all matching translations for the given parameter
	  combination.")))
    (definition (:function dotted-to-ipaddr) "dotted-to-ipaddr dotted {code &key} errorp" nil
     (defsection "Arguments and Values"
       (listing :definition
         (item "{param dotted}" ccldoc::=> #:|A string representing an IP address in the
		"nn.nn.nn.nn" format|)
         (item "{param errorp}" ccldoc::=> "If true (the default) an error is signaled if dotted
		is invalid. If false, NIL is returned.")))
     (defsection "Description"
       (para "Converts a dotted-string representation of a host address to
	  a 32-bit unsigned IP address.")))
    (definition (:function ipaddr-to-dotted) "ipaddr-to-dotted ipaddr {code &key} values" nil
     (defsection "Arguments and Values"
       (listing :definition
         (item "{param ipaddr}" ccldoc::=> "A 32-bit integer representing an IPv4 host
		address")
         (item "{param values}" ccldoc::=> #:|If false (the default), returns a string in the form
		"nn.nn.nn.nn". If true, returns four values
		representing the four octets of the address as unsigned
		8-bit integers.|)))
     (defsection "Description" (para "Converts a 32-bit unsigned IPv4 address into octets.")))
    (definition (:function ipaddr-to-hostname) "ipaddr-to-hostname ipaddr {code &key} ignore-cache" nil
     (defsection "Arguments and Values"
       (listing :definition
         (item "{param ipaddr}" ccldoc::=> "a 32-bit integer representing an IPv4 host address")
         (item "{param ignore-cache}" ccldoc::=> "This argument is ignored (it is accepted for
		compatibility with Franz Allegro)")))
     (defsection "Description"
       (para "Converts a 32-bit unsigned IPv4 address into a host name
	  string")))
    (definition (:function lookup-hostname) "lookup-hostname host" nil
     (defsection "Arguments and Values"
       (listing :definition
         (item "{param host}" ccldoc::=> #:|Specifies the host. It can be either a host name
		string such as "clozure.com", or a dotted address
		string such as "192.168.0.1", or a 32-bit unsigned
		IPv4 address such as 3232235521.|)))
     (defsection "Description"
       (para "Converts a host spec in any of the acceptable formats
	  into a 32-bit unsigned IPv4 address.  IPv6-enabled
	  applications should use the "
        (ref (definition :function ccl::resolve-address)) " function instead.")))
    (definition (:function lookup-port) "lookup-port port protocol" nil
     (defsection "Arguments and Values"
       (listing :definition
         (item "{param port}" ccldoc::=> #:|Specifies the port. It can be either a string,
		such as "http" or a symbol, such as :http, or
		an unsigned port number. Note that a string is
		case-sensitive. A symbol is lowercased before
		lookup.|)
         (item "{param protocol}" ccldoc::=> #:|Must be one of "tcp" or "udp".|)))
     (defsection "Description" (para "Finds the port number for the specified port and protocol")))
    (definition (:function receive-from) "receive-from (socket udp-socket) size {code &key} buffer extract offset" nil
     (defsection "Arguments and Values"
       (listing :definition
         (item "{param socket}" ccldoc::=> "The socket to read from")
         (item "{param size}" ccldoc::=> "Maximum number of bytes to read. If the packet is
		larger than this, any extra bytes are discarded.")
         (item "{param buffer}" ccldoc::=> "If specified, must be an octet vector
		which will be used to read in the data. If not specified, a
		new buffer will be created (of type determined by
		socket-format).")
         (item "{param extract}" ccldoc::=> "If true, the subsequence of the buffer corresponding
		only to the data read in is extracted and returned as the
		first value. If false (the default) the original buffer is
		returned even if it is only partially filled.")
         (item "{param offset}" ccldoc::=> "Specifies the start offset into the buffer at which
		data is to be stored. The default is 0.")
         (item "{param want-socket-address-p}" ccldoc::=> "Indicates that the address of the sender of the
		data should be returned as a "
          (ref (definition :class ccl::socket-address)) " instance rather than as
		separate host and port values.")))
     (defsection "Description"
       "Reads a UDP packet from a socket. If no packets are
	  available, waits for a packet to arrive.

          If :want-socket-address-p is NIL, which is the
          default, four values are returned:"
       (listing :number
         (item "The buffer with the data")
         (item "The number of bytes read")
         (item "The 32-bit unsigned IPv4 address or the 16 byte
	      IPv6 addresss of the sender of the data")
         (item "The port number of the sender of the data"))
       (para "If :want-socket-address-p is true, three values are
          returned:")
       (listing :number
         (item "The buffer with the data")
         (item "The number of bytes read")
         (item "The " (ref (definition :class ccl::socket-address)) " instance of
	      the sender of the data."))))
    (definition (:function send-to)
     "send-to (socket udp-socket) buffer size {code &key} remote remote-host remote-port offset" nil
     (defsection "Arguments and Values"
       (listing :definition
         (item "{param socket}" ccldoc::=> "The socket to write to")
         (item "{param buffer}" ccldoc::=> "A vector containing the data to send. It must be
		an octet vector.")
         (item "{param size}" ccldoc::=> "Number of octets to send")
         (item "{param remote}" ccldoc::=> "The remote address to send the packet to, as a
		"
          (ref (definition :class ccl::socket-address)) " instance. The
		default is the remote address specified in the call to
		make-socket.")
         (item "{param remote-host}" ccldoc::=> "The host to send the packet to, in any format
		acceptable to lookup-hostname. The default is the remote
		host specified in the call to make-socket.")
         (item "{param remote-port}" ccldoc::=> "The port to send the packet to, in any format
		acceptable to lookup-port. The default is the remote port
		specified in the call to make-socket.")
         (item "{param offset}" ccldoc::=> "The offset in the buffer where the packet data starts")))
     (defsection "Description" (para "Send a UDP packet over a socket.")))
    (definition (:function shutdown) "shutdown socket {code &key} direction" nil
     (defsection "Arguments and Values"
       (listing :definition
         (item "{param socket}" ccldoc::=> "The socket to shut down (typically a tcp-stream)")
         (item "{param direction}" ccldoc::=> "One of :input to disallow further input, or :output to
		disallow further output.")))
     (defsection "Description"
       (para "Shuts down part of a bidirectional connection. This is
	  useful if e.g. you need to read responses after sending an
	  end-of-file signal.")))
    (definition (:function socket-os-fd) "socket-os-fd socket" nil
     (defsection "Arguments and Values" (listing :definition (item "{param socket}" ccldoc::=> "The socket")))
     (defsection "Description"
       (para "Returns the native OS's representation of the socket, or
	  NIL if the socket is closed. On Unix, this is the Unix 'file
	  descriptor', a small non-negative integer. Note that it is
	  rather dangerous to mess around with tcp-stream fd's, as there
	  is all sorts of buffering and asynchronous I/O going on above the
	  OS level. listener-socket and udp-socket fd's are safer to
	  mess with directly as there is less magic going on.")))
    (definition (:function remote-host) "remote-host socket" nil
     (defsection "Arguments and Values" (listing :definition (item "{param socket}" ccldoc::=> "The socket")))
     (defsection "Description"
       (para "Returns the 32-bit unsigned IPv4 address of the remote host,
	  or NIL if the socket is not connected.")))
    (definition (:function remote-port) "remote-port socket" nil
     (defsection "Arguments and Values" (listing :definition (item "{param socket}" ccldoc::=> "The socket")))
     (defsection "Description"
       (para "Returns the remote port number, or NIL if the socket is not
	  connected.")))
    (definition (:function local-host) "local-host socket" nil
     (defsection "Arguments and Values" (listing :definition (item "{param socket}" ccldoc::=> "The socket")))
     (defsection "Description"
       (para "Returns 32-bit unsigned IPv4 address or the 16 byte
	  IPv6 address of the local host.")))
    (definition (:function local-port) "local-port socket" nil
     (defsection "Arguments and Values" (listing :definition (item "{param socket}" ccldoc::=> "The socket")))
     (defsection "Description" (para "Returns the local port number")))
    (definition (:function socket-address-family) "socket-address-family thing" nil
     (defsection "Arguments and Values"
       (listing :definition
         (item "{param thing}" ccldoc::=> "The socket or socket-address for which the
		address family is to be queried.")))
     (defsection "Description" (para "Returns :internet, :internet6 or :file, as appropriate.")))
    (definition (:function ccl::socket-address-host) "socket-address-host socket-address" nil
     (defsection "Arguments and Values"
       (listing :definition
         (item "{param socket-address}" ccldoc::=> "The socket-address for which the
		host address is to be queried.")))
     (defsection "Description"
       (para "Returns the host portion of the given socket-address.
	  For :internet addresses, this is a 32-bit integer.  For
	  :internet6 addresses, an array of 16 bytes returned.  For
	  :file addresses, it is the file name string.")))
    (definition (:function ccl::socket-address-port) "socket-address-port socket-address" nil
     (defsection "Arguments and Values"
       (listing :definition
         (item "{param socket-address}" ccldoc::=> "The socket-address for which the
		port number is to be queried.")))
     (defsection "Description"
       (para "Returns the port number of the given socket-address.
	  This function is available only for :internet and :internet6
	  socket addresses.")))
    (definition (:function socket-connect) "socket-connect socket" nil
     (defsection "Arguments and Values" (listing :definition (item "{param socket}" ccldoc::=> "The socket")))
     (defsection "Description"
       (para "Returns :active for tcp-stream, :passive for
	  listener-socket, and NIL for udp-socket")))
    (definition (:function socket-format) "socket-format socket" nil
     (defsection "Arguments and Values" (listing :definition (item "{param socket}" ccldoc::=> "The socket")))
     (defsection "Description"
       (para "Returns the socket format as specified by the :format
	  argument to make-socket.")))
    (definition (:function socket-type) "socket-type socket" nil
     (defsection "Arguments and Values" (listing :definition (item "{param socket}" ccldoc::=> "The socket")))
     (defsection "Description"
       (para "returns :stream for tcp-stream and listener-socket, and
	  :datagram for udp-socket.")))
    (definition (:class ccl::socket-address) "SOCKET-ADDRESS" nil
     (defsection "Description"
       (para "Representation of a socket endpoint address.
          Instances of this class are used to encapsulate the host and
          port of an IP socket endpoint or the filename of a file
          socket.  They can be created by applications from a possibly
          symbolic address representation by the "
        (ref (definition :function ccl::resolve-address)) " function.")))
    (definition (:class socket-error) "SOCKET-ERROR" nil
     (defsection "Description" (para "The class of OS errors signaled by socket functions"))
     (defsection "Superclasses" (para "simple-error")))
    (definition (:function socket-error-code) "socket-error-code socket-error" nil
     (defsection "Arguments and Values" (listing :definition (item "{param socket-error}" ccldoc::=> "the condition")))
     (defsection "Description" (para "The OS error code of the error")))
    (definition (:function socket-error-identifier) "socket-error-identifier socket-error" nil
     (defsection "Arguments and Values" (listing :definition (item "{param socket-error}" ccldoc::=> "the condition")))
     (defsection "Description"
       "A symbol representing the error code in a more
	  OS-independent way.

	  One of: :address-in-use :connection-aborted :no-buffer-space
	  :connection-timed-out :connection-refused :host-unreachable
	  :host-down :network-down :address-not-available :network-reset
	  :connection-reset :shutdown :access-denied or :unknown."))
    (definition (:function socket-error-situation) "socket-error-situation socket-error" nil
     (defsection "Arguments and Values" (listing :definition (item "{param socket-error}" ccldoc::=> "the condition")))
     (defsection "Description"
       (para "A string describing the context where the error happened. On
	  Linux, this is the name of the system call which returned the
	  error.")))
    (definition (:method close) "close (socket socket) {code &key} abort" nil
     (defsection "Arguments and Values"
       (listing :definition
         (item "{param socket}" ccldoc::=> "The socket to close")
         (item "{param abort}" ccldoc::=> "If false (the default), closes the socket in an
		orderly fashion, finishing up any buffered pending I/O,
		before closing the connection. If true, aborts/ignores
		pending I/O. (For listener and udp sockets, this argument is
		effectively ignored since there is never any buffered I/O to
		clean up).")))
     (defsection "Description"
       (para "The close generic function can be applied to sockets. It
	  releases the operating system resources associated with the
	  socket.")))
    (definition (:macro with-open-socket) "with-open-socket (var . make-socket-args) {code &body} body" nil
     (defsection "Arguments and Values"
       (listing :definition
         (item "{param var}" ccldoc::=> "variable to bind")
         (item "{param make-socket-args}" ccldoc::=> "arguments suitable for passing to make-socket")
         (item "{param body}" ccldoc::=> "body to execute")))
     (defsection "Description"
       (para "executes body with var bound to the result of applying
	  make-socket to make-socket-args. The socket gets closed on exit.")))))